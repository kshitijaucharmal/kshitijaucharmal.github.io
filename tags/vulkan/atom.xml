<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Home - vulkan</title>
    <subtitle>Portfolio website to showcase projects, share thoughts, etc.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://kshitijaucharmal.github.io/tags/vulkan/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://kshitijaucharmal.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-04-06T00:00:00+00:00</updated>
    <id>https://kshitijaucharmal.github.io/tags/vulkan/atom.xml</id>
    <entry xml:lang="en">
        <title>Drawing a Triangle (Finally)</title>
        <published>2025-04-06T00:00:00+00:00</published>
        <updated>2025-04-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            Kshitij Aucharmal
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://kshitijaucharmal.github.io/blog/simengine-06-apr-sun/"/>
        <id>https://kshitijaucharmal.github.io/blog/simengine-06-apr-sun/</id>
        
        <content type="html" xml:base="https://kshitijaucharmal.github.io/blog/simengine-06-apr-sun/">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;‚ÄúYup, all I can show after 2 weeks is this triangle.‚Äù&lt;&#x2F;em&gt;&lt;br &#x2F;&gt;
‚Äî Me, after losing sleep to a graphics API&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;kshitijaucharmal.github.io&#x2F;blog&#x2F;simengine-06-apr-sun&#x2F;.&#x2F;triangle.png&quot; alt=&quot;Triangle Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you‚Äôve ever written a graphics engine ‚Äî or even &lt;em&gt;touched&lt;&#x2F;em&gt; a graphics API ‚Äî you know that getting a triangle on screen is &lt;strong&gt;no joke&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But after &lt;strong&gt;2 weeks&lt;&#x2F;strong&gt; of wrestling Vulkan into submission, I finally did it.
And this triangle? It‚Äôs beautiful.
Not because it‚Äôs a work of art, but because it represents the &lt;strong&gt;first real pixel&lt;&#x2F;strong&gt; in my AI-powered simulation engine: &lt;strong&gt;ConceptForge&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;the-vulkan-struggle-is-real&quot;&gt;The Vulkan Struggle Is Real&lt;&#x2F;h2&gt;
&lt;p&gt;I followed the &lt;a href=&quot;https:&#x2F;&#x2F;docs.vulkan.org&#x2F;tutorial&#x2F;latest&#x2F;00_Introduction.html&quot;&gt;Khronos Vulkan Tutorial&lt;&#x2F;a&gt; to get started.&lt;&#x2F;p&gt;
&lt;p&gt;Okay fine ‚Äî &lt;em&gt;partially&lt;&#x2F;em&gt; followed. I may have‚Ä¶ copy-pasted a few things without fully understanding them. üôà But hey ‚Äî when you‚Äôre dealing with &lt;strong&gt;hundreds of lines of boilerplate just to clear the screen&lt;&#x2F;strong&gt;, you do what you gotta do.&lt;&#x2F;p&gt;
&lt;p&gt;Vulkan is not like OpenGL. It doesn‚Äôt hold your hand.&lt;br &#x2F;&gt;
It doesn‚Äôt even look at you. It just gives you &lt;strong&gt;raw power&lt;&#x2F;strong&gt;, and expects you to wire up &lt;strong&gt;everything&lt;&#x2F;strong&gt; ‚Äî memory management, pipelines, synchronization, shaders, framebuffers, render passes‚Ä¶ all of it.&lt;&#x2F;p&gt;
&lt;p&gt;But it does so &lt;strong&gt;explicitly&lt;&#x2F;strong&gt;, and that‚Äôs kind of the genius of it.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;structs-not-functions&quot;&gt;Structs, Not Functions&lt;&#x2F;h2&gt;
&lt;p&gt;Most things in Vulkan are set up by &lt;strong&gt;creating structs&lt;&#x2F;strong&gt;, filling them out, and passing them into Vulkan functions.&lt;&#x2F;p&gt;
&lt;p&gt;For example, creating a framebuffer looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; class=&quot;language-cpp z-code&quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;VkFramebufferCreateInfo &lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;framebufferInfo&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;framebufferInfo&lt;span class=&quot;z-punctuation z-accessor z-dot z-c++&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-member z-c++&quot;&gt;sType&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;framebufferInfo&lt;span class=&quot;z-punctuation z-accessor z-dot z-c++&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-member z-c++&quot;&gt;renderPass&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; renderPass&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;framebufferInfo&lt;span class=&quot;z-punctuation z-accessor z-dot z-c++&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-member z-c++&quot;&gt;width&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; swapChainExtent&lt;span class=&quot;z-punctuation z-accessor z-dot z-c++&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-member z-c++&quot;&gt;width&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;framebufferInfo&lt;span class=&quot;z-punctuation z-accessor z-dot z-c++&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-member z-c++&quot;&gt;height&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; swapChainExtent&lt;span class=&quot;z-punctuation z-accessor z-dot z-c++&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-member z-c++&quot;&gt;height&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;framebufferInfo&lt;span class=&quot;z-punctuation z-accessor z-dot z-c++&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-member z-c++&quot;&gt;layers&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c++&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;vkCreateFramebuffer&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;device&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;framebufferInfo&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c++&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;swapChainFramebuffers&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;i&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;!=&lt;&#x2F;span&gt; VK_SUCCESS&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-flow z-throw z-c++&quot;&gt;throw&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-double-colon z-c++&quot;&gt;::&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;runtime_error&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;failed to create framebuffer!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how there‚Äôs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A clearly defined struct with named fields,&lt;&#x2F;li&gt;
&lt;li&gt;An explicit &lt;code&gt;sType&lt;&#x2F;code&gt; to describe the structure‚Äôs role,&lt;&#x2F;li&gt;
&lt;li&gt;And then a Vulkan function that consumes the whole config.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I actually like this model. It avoids long, confusing function calls with 10+ parameters, and makes the code pretty readable ‚Äî especially once you understand what the structs do.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;it-s-just-a-triangle-or-is-it&quot;&gt;It‚Äôs Just a Triangle‚Ä¶ or Is It?&lt;&#x2F;h2&gt;
&lt;p&gt;Sure, visually it‚Äôs just three vertices forming a triangle.&lt;&#x2F;p&gt;
&lt;p&gt;But behind the scenes?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Vulkan instance setup ‚úîÔ∏è&lt;&#x2F;li&gt;
&lt;li&gt;Device selection ‚úîÔ∏è&lt;&#x2F;li&gt;
&lt;li&gt;Logical device + queues ‚úîÔ∏è&lt;&#x2F;li&gt;
&lt;li&gt;Swapchain management ‚úîÔ∏è&lt;&#x2F;li&gt;
&lt;li&gt;Render pass &amp;amp; framebuffer setup ‚úîÔ∏è&lt;&#x2F;li&gt;
&lt;li&gt;Shaders + pipeline layout ‚úîÔ∏è&lt;&#x2F;li&gt;
&lt;li&gt;Command buffers &amp;amp; synchronization ‚úîÔ∏è&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If that sounds like overkill for a triangle‚Ä¶ that‚Äôs because it &lt;em&gt;is&lt;&#x2F;em&gt;.&lt;br &#x2F;&gt;
But it‚Äôs also the groundwork for everything that will follow.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;the-next-step&quot;&gt;The Next Step&lt;&#x2F;h2&gt;
&lt;p&gt;Now that I‚Äôve got a triangle on screen, I need a break from Vulkan boilerplate.&lt;br &#x2F;&gt;
So, I‚Äôm going to integrate &lt;strong&gt;Dear ImGui&lt;&#x2F;strong&gt; next ‚Äî to add a nice GUI overlay and make debugging and interaction a lot easier moving forward.&lt;&#x2F;p&gt;
&lt;p&gt;Being able to click buttons, inspect data, and tweak values in real-time is going to be a &lt;strong&gt;game changer&lt;&#x2F;strong&gt; as I start building out the actual engine systems.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This isn‚Äôt just about rendering a triangle.&lt;br &#x2F;&gt;
It‚Äôs about building the foundation for &lt;strong&gt;ConceptForge&lt;&#x2F;strong&gt; ‚Äî my AI-powered simulation engine where users will eventually just &lt;em&gt;describe&lt;&#x2F;em&gt; a world in plain English‚Ä¶ and watch it unfold.&lt;&#x2F;p&gt;
&lt;p&gt;Today, it‚Äôs a triangle.&lt;br &#x2F;&gt;
Tomorrow, it‚Äôll be a procedurally generated city full of AI agents reacting to gravity and laser beams.&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned üöÄ&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Concept Forge</title>
        <published>2025-04-05T00:00:00+00:00</published>
        <updated>2025-04-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            Kshitij Aucharmal
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://kshitijaucharmal.github.io/blog/simengine-05-apr-sat/"/>
        <id>https://kshitijaucharmal.github.io/blog/simengine-05-apr-sat/</id>
        
        <content type="html" xml:base="https://kshitijaucharmal.github.io/blog/simengine-05-apr-sat/">&lt;h1 id=&quot;conceptforge-building-my-ai-powered-simulation-engine-from-scratch&quot;&gt;ConceptForge: Building My AI-Powered Simulation Engine from Scratch&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;‚ÄúDescribe your world in English. Let the AI bring it to life.‚Äù&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;what-i-m-building&quot;&gt;What I‚Äôm Building&lt;&#x2F;h2&gt;
&lt;p&gt;Over the next six months, I‚Äôm working on &lt;strong&gt;ConceptForge&lt;&#x2F;strong&gt; ‚Äî an &lt;strong&gt;AI-powered simulation engine&lt;&#x2F;strong&gt; built completely from scratch, using &lt;strong&gt;Vulkan&lt;&#x2F;strong&gt;, &lt;strong&gt;C++&lt;&#x2F;strong&gt;, and a layer of &lt;strong&gt;natural language processing&lt;&#x2F;strong&gt; magic.&lt;&#x2F;p&gt;
&lt;p&gt;This isn‚Äôt just a simulation engine. It‚Äôs the start of something more ‚Äî maybe even a game engine down the line. Here‚Äôs the dream:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A low-level, high-performance &lt;strong&gt;rendering and simulation engine&lt;&#x2F;strong&gt; in &lt;strong&gt;C++&lt;&#x2F;strong&gt;, powered by &lt;strong&gt;Vulkan&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Physics, real-time simulation, ray tracing (yes, built myself ‚Äî no Vulkan RTX extensions).&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;strong&gt;Python API&lt;&#x2F;strong&gt; using &lt;strong&gt;pybind11&lt;&#x2F;strong&gt;, so users can write high-level logic easily.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;LLM integration&lt;&#x2F;strong&gt; ‚Äî users can describe scenes in plain English, and the AI will generate Python code behind the scenes.&lt;&#x2F;li&gt;
&lt;li&gt;GUI using &lt;strong&gt;GLFW&lt;&#x2F;strong&gt; and &lt;strong&gt;ImGui&lt;&#x2F;strong&gt; to provide visual feedback, simulation controls, and editing tools.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All of this is open-source and evolving here:&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kshitijaucharmal&#x2F;ConceptForge&quot;&gt;GitHub: ConceptForge&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;high-level-architecture&quot;&gt;High-Level Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;This is the general structure I‚Äôm working with:
&lt;img src=&quot;https:&#x2F;&#x2F;kshitijaucharmal.github.io&#x2F;blog&#x2F;simengine-05-apr-sat&#x2F;flowchart.png&quot; alt=&quot;Flowchart&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It‚Äôs a full-stack creative pipeline ‚Äî except instead of websites, it makes interactive 3D simulations based on natural language prompts.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;tech-stack&quot;&gt;Tech Stack&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tech&lt;&#x2F;th&gt;&lt;th&gt;Purpose&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;C++&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;Core simulation logic, ECS, physics, and rendering backend&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vulkan.org&#x2F;&quot;&gt;&lt;strong&gt;Vulkan&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;Raw rendering control ‚Äî full GPU access, custom pipelines, ray tracing&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.glfw.org&#x2F;&quot;&gt;&lt;strong&gt;GLFW&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;Window&#x2F;context management&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ocornut&#x2F;imgui&quot;&gt;&lt;strong&gt;ImGui&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;Editor UI, debug controls, interactive tweaks&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pybind&#x2F;pybind11&quot;&gt;&lt;strong&gt;pybind11&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;Binding layer to expose C++ functionality to Python&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Python&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;User scripting interface (and what the AI generates)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;LLMs&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;Converts English into code using GPT or custom small models&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;vulkan-in-simple-terms&quot;&gt;Vulkan in Simple Terms&lt;&#x2F;h2&gt;
&lt;p&gt;Why Vulkan? Because I want &lt;strong&gt;total control&lt;&#x2F;strong&gt; over how things render, move, and interact ‚Äî right down to how memory is allocated on the GPU.&lt;&#x2F;p&gt;
&lt;p&gt;Think of Vulkan like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;OpenGL holds your hand. Vulkan tells you to build the chair you‚Äôre gonna sit on.&lt;&#x2F;li&gt;
&lt;li&gt;That means more boilerplate, but also &lt;strong&gt;massive control&lt;&#x2F;strong&gt; and &lt;strong&gt;zero hidden costs&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Perfect for things like: &lt;strong&gt;custom ray tracing&lt;&#x2F;strong&gt;, &lt;strong&gt;compute shaders&lt;&#x2F;strong&gt;, &lt;strong&gt;massive simulations&lt;&#x2F;strong&gt;, and &lt;strong&gt;crazy GPU tricks&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;the-vision&quot;&gt;The Vision&lt;&#x2F;h2&gt;
&lt;p&gt;Here‚Äôs the core loop I‚Äôm building toward:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;User: &lt;em&gt;‚ÄúSpawn a red sphere on a green plane. Drop a blue cube from 5 meters with gravity.‚Äù&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;The LLM parses this text and generates corresponding Python code using the engine‚Äôs API.&lt;&#x2F;li&gt;
&lt;li&gt;Python runs ‚Üí &lt;code&gt;pybind11&lt;&#x2F;code&gt; passes it to the C++ backend.&lt;&#x2F;li&gt;
&lt;li&gt;Simulation is updated, rendered using Vulkan, displayed in the GLFW window.&lt;&#x2F;li&gt;
&lt;li&gt;User can interact, tweak parameters, or add more prompts.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This bridges &lt;strong&gt;natural language + code + simulation&lt;&#x2F;strong&gt;, and gives users an almost magical interface to create with.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;what-you-ll-be-able-to-do&quot;&gt;What You‚Äôll Be Able To Do&lt;&#x2F;h2&gt;
&lt;p&gt;Eventually, this will support things like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Prototyping with AI assistance&lt;&#x2F;li&gt;
&lt;li&gt;Simulating complex systems: physics, particles, ray tracing, ray marching, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Procedural scene generation via LLMs&lt;&#x2F;li&gt;
&lt;li&gt;AI agents interacting in a simulated world&lt;&#x2F;li&gt;
&lt;li&gt;Realtime interactive visualization for data or experiments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;visual-overview&quot;&gt;Visual Overview&lt;&#x2F;h2&gt;
&lt;p&gt;Here‚Äôs a high-level diagram of how it all connects:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;kshitijaucharmal.github.io&#x2F;blog&#x2F;simengine-05-apr-sat&#x2F;diagram.png&quot; alt=&quot;ConceptForge Diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;why-i-m-doing-this&quot;&gt;Why I‚Äôm Doing This&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôve always wanted an engine where I could &lt;em&gt;just describe what I want&lt;&#x2F;em&gt;, and it would spring to life.
We‚Äôre at a point now where LLMs are good enough to bridge that gap ‚Äî but most engines are built from the top-down,
and not designed for this kind of integration.&lt;&#x2F;p&gt;
&lt;p&gt;So I‚Äôm doing it differently: bottom-up, from &lt;strong&gt;GPU code to English-language scripting&lt;&#x2F;strong&gt;, with a clean and extensible architecture in mind.&lt;&#x2F;p&gt;
&lt;p&gt;This is going to take time, but I‚Äôm documenting every step, and you can follow the journey (and maybe even contribute) on GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;The real reason can just be cause I want to :P&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;follow-the-project&quot;&gt;Follow the Project&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kshitijaucharmal&#x2F;ConceptForge&quot;&gt;GitHub: ConceptForge&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Blog posts, demos, and releases will be linked here as they come out.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Got ideas? Want to contribute? Drop me a message or a GitHub issue.
Let‚Äôs build something wild. üî•&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
